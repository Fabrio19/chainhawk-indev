// Core types for blockchain compliance platform

export interface Wallet {
  address: string;
  chain: string;
  balance: number;
  riskScore: number;
  lastActivity: string;
  labels: string[];
  isBlacklisted: boolean;
  entityType?: "exchange" | "mixer" | "defi" | "individual" | "unknown";
}

export interface Transaction {
  hash: string;
  from: string;
  to: string;
  amount: number;
  currency: string;
  timestamp: string;
  chain: string;
  blockNumber: number;
  gasUsed: number;
  riskFlags: string[];
  category: "normal" | "suspicious" | "high-risk";
  // Advanced tracer fields
  depth?: number;
  riskLevel?: number;
  direction?: 'in' | 'out';
  isCrossChain?: boolean;
  bridgeName?: string;
  viaContract?: boolean;
  contractInteraction?: string;
  erc20Transfers?: any[];
  erc721Transfers?: any[];
}

export interface SanctionHit {
  address: string;
  sanctionList: "OFAC" | "UN" | "EU" | "India";
  matchType: "exact" | "fuzzy";
  confidence: number;
  entity: string;
  reason: string;
  dateAdded: string;
}

export interface PEPRecord {
  name: string;
  country: string;
  position: string;
  riskLevel: "low" | "medium" | "high";
  lastUpdated: string;
  sourceOfWealth: string;
  politicalExposure: string;
}

export interface Evidence {
  id: string;
  case_id: string;
  file_path: string;
  file_type: "KYC" | "ITR" | "Note" | "Screenshot";
  uploaded_by: string;
  uploaded_at: string;
  description?: string;
}

export interface ComplianceCase {
  id: string;
  wallet_address: string;
  related_tx_hash?: string;
  risk_score: number;
  status: "New" | "Investigating" | "Filed" | "Closed";
  assigned_to: string;
  created_at: string;
  updated_at: string;
  assignedUser?: {
    id: string;
    name: string;
    email: string;
  };
  evidence?: Evidence[];
  actions?: CaseAction[];
}

export interface CaseAction {
  id: string;
  type: "investigation" | "report" | "escalation" | "closure";
  description: string;
  performedBy: string;
  timestamp: string;
  evidence?: string[];
}

export interface CaseNote {
  id: string;
  caseId: string;
  authorId: string;
  authorName: string;
  content: string;
  type: "text" | "analysis" | "decision" | "escalation";
  isPrivate: boolean;
  timestamp: string;
  attachments: Array<{
    id: string;
    fileName: string;
    fileType: string;
    fileSize: number;
  }>;
  mentions: string[];
  tags: string[];
}

export interface Alert {
  id: string;
  type: "transaction" | "wallet" | "sanction" | "pep" | "behavior";
  severity: "low" | "medium" | "high" | "critical";
  title: string;
  description: string;
  relatedAddress: string;
  timestamp: string;
  status: "new" | "acknowledged" | "investigating" | "resolved";
  autoGenerated: boolean;
}

export interface RegulatoryReport {
  id: string;
  type: "STR" | "CTR" | "SAR";
  regulatorCode: "FIU-IND" | "SEBI" | "RBI";
  status: "draft" | "submitted" | "accepted" | "rejected";
  submissionDate?: string;
  reportingPeriod: {
    from: string;
    to: string;
  };
  totalTransactions: number;
  suspiciousTransactions: number;
  attachments: string[];
}

export interface APIIntegration {
  id: string;
  name: string;
  type: "exchange" | "bank" | "blockchain" | "compliance";
  status: "active" | "inactive" | "error";
  endpoint: string;
  lastSync: string;
  apiKey: string;
  rateLimitRemaining: number;
}

export interface DashboardStats {
  totalWallets: number;
  highRiskWallets: number;
  todayTransactions: number;
  suspiciousTransactions: number;
  openCases: number;
  pendingReports: number;
  activeAlerts: number;
  complianceScore: number;
}

export interface BlockchainNetwork {
  id: string;
  name: string;
  symbol: string;
  isEnabled: boolean;
  lastBlock: number;
  avgBlockTime: number;
  transactionFee: number;
}

export interface EntityCluster {
  clusterId: string;
  entityType: string;
  confidence: number;
  wallets: string[];
  totalVolume: number;
  riskScore: number;
  labels: string[];
  firstSeen: string;
  lastActive: string;
}

export interface AuditLogEntry {
  id: string;
  userId: string;
  action: string;
  resourceType: string;
  resourceId: string;
  timestamp: string;
  ipAddress: string;
  userAgent: string;
  changes?: Record<string, any>;
  result: "success" | "failure";
}
