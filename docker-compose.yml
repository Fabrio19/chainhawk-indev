version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: chainhawk-postgres
    environment:
      POSTGRES_DB: cryptocompliance
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/prisma:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - chainhawk-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: chainhawk-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - chainhawk-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: chainhawk-minio
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - chainhawk-network
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: chainhawk-backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:postgres123@postgres:5432/cryptocompliance
      REDIS_URL: redis://redis:6379
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: 
      MINIO_ENDPOINT: minio
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_BUCKET: chainhawk-files
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRE: 8h
      FRONTEND_URL: http://localhost:8080
      ENABLE_AUDIT_LOGGING: true
      RATE_LIMIT_WINDOW_MS: 900000
      RATE_LIMIT_MAX_REQUESTS: 100
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - chainhawk-network
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: npm run dev

  # Frontend (Optional - can run locally for development)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: chainhawk-frontend
    environment:
      VITE_API_BASE_URL: http://localhost:3001/api
      VITE_USE_MOCK_API: false
    ports:
      - "8083:8083"
    depends_on:
      - backend
    networks:
      - chainhawk-network
    volumes:
      - ./src:/app/src
      - /app/node_modules

volumes:
  postgres_data:
  redis_data:
  minio_data:

networks:
  chainhawk-network:
    driver: bridge 