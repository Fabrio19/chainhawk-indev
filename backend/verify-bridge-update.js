const { PrismaClient } = require('@prisma/client');
const bridgeConfig = require('./src/services/bridgeMonitor');
const bridgeABIs = require('./src/services/abis/bridgeABIs');

const prisma = new PrismaClient();

async function verifyBridgeUpdate() {
  console.log('üîç Verifying Bridge Monitoring System Update');
  console.log('==========================================\n');

  try {
    // 1. Check database enum
    console.log('1Ô∏è‚É£ Checking Database BridgeProtocol Enum...');
    const enumValues = await prisma.$queryRaw`
      SELECT unnest(enum_range(NULL::"BridgeProtocol")) as protocol;
    `;
    const protocols = enumValues.map(row => row.protocol);
    console.log('   Database protocols:', protocols);
    
    const hasMultichain = protocols.includes('MULTICHAIN');
    const hasCeler = protocols.includes('CELER');
    
    if (hasMultichain) {
      console.log('   ‚ùå MULTICHAIN still exists in database enum');
    } else {
      console.log('   ‚úÖ MULTICHAIN removed from database enum');
    }
    
    if (hasCeler) {
      console.log('   ‚úÖ CELER added to database enum');
    } else {
      console.log('   ‚ùå CELER missing from database enum');
    }

    // 2. Check bridge configuration
    console.log('\n2Ô∏è‚É£ Checking Bridge Configuration...');
    const configProtocols = Object.keys(bridgeConfig.BRIDGE_CONFIGS);
    console.log('   Configured protocols:', configProtocols);
    
    const configHasMultichain = configProtocols.includes('MULTICHAIN');
    const configHasCeler = configProtocols.includes('CELER');
    
    if (configHasMultichain) {
      console.log('   ‚ùå MULTICHAIN still exists in bridge config');
    } else {
      console.log('   ‚úÖ MULTICHAIN removed from bridge config');
    }
    
    if (configHasCeler) {
      console.log('   ‚úÖ CELER added to bridge config');
      console.log('   üìã Celer contracts:', Object.keys(bridgeConfig.BRIDGE_CONFIGS.CELER.networks));
    } else {
      console.log('   ‚ùå CELER missing from bridge config');
    }

    // 3. Check ABIs
    console.log('\n3Ô∏è‚É£ Checking Bridge ABIs...');
    const abiProtocols = Object.keys(bridgeABIs);
    console.log('   ABI protocols:', abiProtocols);
    
    const abiHasMultichain = abiProtocols.includes('MULTICHAIN_ABI');
    const abiHasCeler = abiProtocols.includes('CELER_ABI');
    
    if (abiHasMultichain) {
      console.log('   ‚ùå MULTICHAIN_ABI still exists');
    } else {
      console.log('   ‚úÖ MULTICHAIN_ABI removed');
    }
    
    if (abiHasCeler) {
      console.log('   ‚úÖ CELER_ABI added');
      console.log('   üìã Celer events:', bridgeABIs.CELER_ABI.length);
    } else {
      console.log('   ‚ùå CELER_ABI missing');
    }

    // 4. Check database data
    console.log('\n4Ô∏è‚É£ Checking Database Data...');
    try {
      const multichainCount = await prisma.bridgeTransaction.count({
        where: { bridgeProtocol: 'MULTICHAIN' }
      });
      
      const celerCount = await prisma.bridgeTransaction.count({
        where: { bridgeProtocol: 'CELER' }
      });
      
      if (multichainCount > 0) {
        console.log('   ‚ùå Found', multichainCount, 'MULTICHAIN transactions in database');
      } else {
        console.log('   ‚úÖ No MULTICHAIN transactions in database');
      }
      
      console.log('   üìä CELER transactions:', celerCount);
    } catch (error) {
      console.log('   ‚ö†Ô∏è  Could not check transaction data:', error.message);
    }

    // 5. Check total transactions by protocol
    console.log('\n5Ô∏è‚É£ Checking Transaction Distribution...');
    try {
      const protocolCounts = await prisma.bridgeTransaction.groupBy({
        by: ['bridgeProtocol'],
        _count: { bridgeProtocol: true }
      });
      
      console.log('   Transaction counts by protocol:');
      protocolCounts.forEach(p => {
        console.log(`   - ${p.bridgeProtocol}: ${p._count.bridgeProtocol}`);
      });
    } catch (error) {
      console.log('   ‚ö†Ô∏è  Could not check transaction distribution:', error.message);
    }

    // 6. Summary
    console.log('\n==========================================');
    console.log('üìã Update Verification Summary:');
    
    const allGood = !hasMultichain && hasCeler && !configHasMultichain && 
                   configHasCeler && !abiHasMultichain && abiHasCeler;
    
    if (allGood) {
      console.log('‚úÖ SUCCESS: Bridge monitoring system successfully updated!');
      console.log('‚úÖ MULTICHAIN completely removed');
      console.log('‚úÖ CELER fully integrated');
      console.log('‚úÖ All configurations updated');
      console.log('‚úÖ Database cleaned and migrated');
    } else {
      console.log('‚ùå ISSUES FOUND: Some updates may be incomplete');
      console.log('   Please check the details above and complete any missing steps');
    }

  } catch (error) {
    console.error('‚ùå Error during verification:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

// Run verification
verifyBridgeUpdate(); 